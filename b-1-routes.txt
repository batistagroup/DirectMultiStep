tests/generation/test_batched_beam_search.py::TestBatchedVsOptimizedComparison::test_multiple_batches_independently_correct The model has 9,857,333 trainable parameters
Beam search:   9%|█████████▏                                                                                             | 93/1038 [00:01<00:14, 65.31it/s]
2025-10-03 07:51:47 [INFO] directmultistep: Generating routes with beam size 5. The progress bar may end early if all beams find end token.
  8%|█████████▌                                                                                                          | 87/1051 [00:01<00:11, 86.62it/s]
FAILED

======================================================================== FAILURES =========================================================================
______________________________________ TestBatchedVsOptimizedComparison.test_multiple_batches_independently_correct _______________________________________

self = <test_batched_beam_search.TestBatchedVsOptimizedComparison object at 0x16679fe10>
model_components = (Seq2Seq(
  (decoder): Decoder(
    (tok_embedding): Embedding(53, 256)
    (pos_embedding): Embedding(1075, 256)
    ...t at 0x107aadc10>, BatchedBeamSearch(beam_size=5, max_length=1074), BeamSearchOptimized(beam_width=5, max_length=1074))

    def test_multiple_batches_independently_correct(self, model_components):
        """Test that batched decoding produces correct results for each batch item independently."""
        model, rds, batched_beam, optimized_beam = model_components

        targets = ["CNCc1ccccc1", "CC(=O)OC1=CC=CC=C1C(=O)O"]
        n_steps_list = [1, 1]

        from directmultistep.generate import prepare_batched_input_tensors

        encoder_batch, steps_batch, path_starts, target_lengths = prepare_batched_input_tensors(
            targets=targets,
            n_steps_list=n_steps_list,
            starting_materials=[None, None],
            rds=rds,
            product_max_length=rds.product_max_length,
            sm_max_length=rds.sm_max_length,
        )

        torch.manual_seed(42)
        batched_results = batched_beam.decode(
            src_BC=encoder_batch.to(batched_beam.device),
            steps_B1=steps_batch.to(batched_beam.device) if steps_batch is not None else None,
            path_starts=[ps.to(batched_beam.device) for ps in path_starts],
            progress_bar=True,
        )

        from directmultistep.generate import prepare_input_tensors

        for idx, (target, n_steps) in enumerate(zip(targets, n_steps_list, strict=False)):
            encoder_inp, steps_tens, path_tens = prepare_input_tensors(
                target, n_steps, None, rds, rds.product_max_length, rds.sm_max_length
            )

            encoder_inp = encoder_inp.to(optimized_beam.device)
            steps_tens = steps_tens.to(optimized_beam.device) if steps_tens is not None else None
            path_tens = path_tens.to(optimized_beam.device)

            torch.manual_seed(42)
            optimized_results = optimized_beam.decode(
                src_BC=encoder_inp,
                steps_B1=steps_tens,
                path_start_BL=path_tens,
                progress_bar=True,
            )

            batched_seqs = [seq for seq, _ in batched_results[idx]]
            optimized_seqs = [seq for seq, _ in optimized_results[0]]

            for beam_idx, (b_seq, o_seq) in enumerate(zip(batched_seqs, optimized_seqs, strict=False)):
>               assert b_seq == o_seq, (
                    f"Target {idx} ('{target}'), Beam {beam_idx}: Sequence mismatch.\n"
                    f"Batched: {b_seq}\nOptimized: {o_seq}"
                )
E               AssertionError: Target 0 ('CNCc1ccccc1'), Beam 0: Sequence mismatch.
E                 Batched: {'smiles':'CNCc1ccccc1','children':[{'smiles':'
E                 Optimized: {'smiles':'CNCc1ccccc1','children':[{'smiles':'CNC(=O)c1ccccc1','children':[{'smiles':'CN'},{'smiles':'O=C(Cl)c1ccccc1'}]}]}
E               assert "{'smiles':'C...:[{'smiles':'" == "{'smiles':'C...1ccccc1'}]}]}"
E
E                 - {'smiles':'CNCc1ccccc1','children':[{'smiles':'CNC(=O)c1ccccc1','children':[{'smiles':'CN'},{'smiles':'O=C(Cl)c1ccccc1'}]}]}
E                 + {'smiles':'CNCc1ccccc1','children':[{'smiles':'

tests/generation/test_batched_beam_search.py:257: AssertionError
FAILED tests/generation/test_batched_beam_search.py::TestBatchedVsOptimizedComparison::test_multiple_batches_independently_correct - AssertionError: Target 0 ('CNCc1ccccc1'), Beam 0: Sequence mismatch.
